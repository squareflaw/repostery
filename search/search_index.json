{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Repostery Web app that displays data visualizations for github repositories. The fronted client is built with ReactJS and the backend API is built with Django . Prerequisites Python . NodeJs . Installation virtualenv .venv .venv/Scripts/Activate.ps1 pip install -r requirements.txt python manage.py makemigrations python manage.py migrate Local Development python manage.py runserver cd frontend npm start Run tests pytest --flake8 Deployment This project uses the CI/CD approach, a heroku instance can be linked directly to the github repository. Any new push to the origing/master branch will trigger the travisCI test runner and if all tests pass successfuly Heroku will deploy automaticaly","title":"Home"},{"location":"#repostery","text":"Web app that displays data visualizations for github repositories. The fronted client is built with ReactJS and the backend API is built with Django .","title":"Repostery"},{"location":"#prerequisites","text":"Python . NodeJs .","title":"Prerequisites"},{"location":"#installation","text":"virtualenv .venv .venv/Scripts/Activate.ps1 pip install -r requirements.txt python manage.py makemigrations python manage.py migrate","title":"Installation"},{"location":"#local-development","text":"python manage.py runserver cd frontend npm start","title":"Local Development"},{"location":"#run-tests","text":"pytest --flake8","title":"Run tests"},{"location":"#deployment","text":"This project uses the CI/CD approach, a heroku instance can be linked directly to the github repository. Any new push to the origing/master branch will trigger the travisCI test runner and if all tests pass successfuly Heroku will deploy automaticaly","title":"Deployment"},{"location":"api/authentication/","text":"Users Authentication Registration Authorization tokens are issued and returned when a user registers. Request : POST /api/v1/users Parameters: Body { \"user\": { \"email\": \"email@example.com\", \"username\": \"username_example\", \"password\": \"secretpassword\" } } Response : Content-Type application/json 201 CREATED { \"email\": \"email@example.com\", \"username\": \"exampleuser\", \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6OSwiZXhwIjoxNTk1MzcwODQ4LjB9._3sJ-jfAPU3A3Tc2c7uVZ2d-ulavsGkUN5QX3hYs1Lw\" } The token returned with this response should be stored by the client for authenticating future requests to the API. Login A registered user can also retrieve their token with the following request: Request : POST /api/v1/users/login Parameters: Body { \"user\": { \"email\": \"email@example.com\", \"password\": \"secretpassword\", } } Response : Content-Type application/json 200 OK { \"email\": \"email@example.com\", \"username\": \"exampleuser\", \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6OSwiZXhwIjoxNTk1MzcxMDE5LjB9.N6PnGrXRwLEmUmeH8k09wRB2zIzKuPAyw1pJIGS2vls\" } Authenticate requests For clients to authenticate, the token key should be included in the Authorization HTTP header.The key should be prefixed by the string literal \"Token\", with whitespace separating the two strings. For example: Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6OSwiZXhwIjoxNTk1MzcxMDE5LjB9.N6PnGrXRwLEmUmeH8k09wRB2zIzKuPAyw1pJIGS2vls Unauthenticated responses that are denied permission will result in an HTTP 401 Unauthorized response with an appropriate WWW-Authenticate header. For example: WWW-Authenticate: Token The curl command line tool may be useful for testing token authenticated APIs. For example: curl -X GET http://127.0.0.1:8000/api/v1/example/ -H 'Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6OSwiZXhwIjoxNTk1MzcxMDE5LjB9.N6PnGrXRwLEmUmeH8k09wRB2zIzKuPAyw1pJIGS2vls'","title":"Authentication"},{"location":"api/authentication/#users-authentication","text":"","title":"Users Authentication"},{"location":"api/authentication/#registration","text":"Authorization tokens are issued and returned when a user registers. Request : POST /api/v1/users Parameters: Body { \"user\": { \"email\": \"email@example.com\", \"username\": \"username_example\", \"password\": \"secretpassword\" } } Response : Content-Type application/json 201 CREATED { \"email\": \"email@example.com\", \"username\": \"exampleuser\", \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6OSwiZXhwIjoxNTk1MzcwODQ4LjB9._3sJ-jfAPU3A3Tc2c7uVZ2d-ulavsGkUN5QX3hYs1Lw\" } The token returned with this response should be stored by the client for authenticating future requests to the API.","title":"Registration"},{"location":"api/authentication/#login","text":"A registered user can also retrieve their token with the following request: Request : POST /api/v1/users/login Parameters: Body { \"user\": { \"email\": \"email@example.com\", \"password\": \"secretpassword\", } } Response : Content-Type application/json 200 OK { \"email\": \"email@example.com\", \"username\": \"exampleuser\", \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6OSwiZXhwIjoxNTk1MzcxMDE5LjB9.N6PnGrXRwLEmUmeH8k09wRB2zIzKuPAyw1pJIGS2vls\" }","title":"Login"},{"location":"api/authentication/#authenticate-requests","text":"For clients to authenticate, the token key should be included in the Authorization HTTP header.The key should be prefixed by the string literal \"Token\", with whitespace separating the two strings. For example: Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6OSwiZXhwIjoxNTk1MzcxMDE5LjB9.N6PnGrXRwLEmUmeH8k09wRB2zIzKuPAyw1pJIGS2vls Unauthenticated responses that are denied permission will result in an HTTP 401 Unauthorized response with an appropriate WWW-Authenticate header. For example: WWW-Authenticate: Token The curl command line tool may be useful for testing token authenticated APIs. For example: curl -X GET http://127.0.0.1:8000/api/v1/example/ -H 'Authorization: Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6OSwiZXhwIjoxNTk1MzcxMDE5LjB9.N6PnGrXRwLEmUmeH8k09wRB2zIzKuPAyw1pJIGS2vls'","title":"Authenticate requests"},{"location":"api/users/","text":"Users Endpoint for getting and updating user information Get user's information You can only retrieve/update the user whose token authenticacion belongs to. Request : GET /api/v1/user/:username Parameters: username Note: Authorization Protected Response : Content-Type application/json 200 OK { \"email\": \"example@email.com\", \"username\": \"example_username\", \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6NywiZXhwIjoxNTk1MzcyNjQ3LjB9.DVV8aZ8xtBMW0eCGN9taThoLu4469Bxr0ho5En9rhdY\", \"image\": \"link to image\" } Update user's information You can only retrieve/update the user whose token authenticacion belongs to. Request : PUT /api/v1/user/:username Parameters: username Body { \"user\": { \"email\": \"new_example@email.com\", \"username\": \"new_example_username\", \"password\": \"new_secrepass\", \"image\": \"link to image\" } } Note: All parameters are optional Authorization Protected Response : Content-Type application/json 200 OK { \"email\": \"example@email.com\", \"username\": \"example_username\", \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6NywiZXhwIjoxNTk1MzcyNjQ3LjB9.DVV8aZ8xtBMW0eCGN9taThoLu4469Bxr0ho5En9rhdY\", \"image\": \"link to image\" } Get user's profile information Profiles are created automaticaly when a new user registers. The user object takes care of authentication only. Everything else is done with the profile (user.profile) Request : GET /api/v1/profiles/:username Parameters: username Response : Content-Type application/json 200 OK { \"id\": \"5d47d15f-ab73-4e50-ad21-b6e8f560909a\", \"username\": \"username_example\", \"image\": \"link to image\" }","title":"Users"},{"location":"api/users/#users","text":"Endpoint for getting and updating user information","title":"Users"},{"location":"api/users/#get-users-information","text":"You can only retrieve/update the user whose token authenticacion belongs to. Request : GET /api/v1/user/:username Parameters: username Note: Authorization Protected Response : Content-Type application/json 200 OK { \"email\": \"example@email.com\", \"username\": \"example_username\", \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6NywiZXhwIjoxNTk1MzcyNjQ3LjB9.DVV8aZ8xtBMW0eCGN9taThoLu4469Bxr0ho5En9rhdY\", \"image\": \"link to image\" }","title":"Get user's information"},{"location":"api/users/#update-users-information","text":"You can only retrieve/update the user whose token authenticacion belongs to. Request : PUT /api/v1/user/:username Parameters: username Body { \"user\": { \"email\": \"new_example@email.com\", \"username\": \"new_example_username\", \"password\": \"new_secrepass\", \"image\": \"link to image\" } } Note: All parameters are optional Authorization Protected Response : Content-Type application/json 200 OK { \"email\": \"example@email.com\", \"username\": \"example_username\", \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6NywiZXhwIjoxNTk1MzcyNjQ3LjB9.DVV8aZ8xtBMW0eCGN9taThoLu4469Bxr0ho5En9rhdY\", \"image\": \"link to image\" }","title":"Update user's information"},{"location":"api/users/#get-users-profile-information","text":"Profiles are created automaticaly when a new user registers. The user object takes care of authentication only. Everything else is done with the profile (user.profile) Request : GET /api/v1/profiles/:username Parameters: username Response : Content-Type application/json 200 OK { \"id\": \"5d47d15f-ab73-4e50-ad21-b6e8f560909a\", \"username\": \"username_example\", \"image\": \"link to image\" }","title":"Get user's profile information"}]}